[
  {
    "question": "Which types of negotiation are associated with the right header ?",
    "answers" : [
      {
        "answer" : "content negociation ⇒ Accept",
        "valid" : true
      },
      {
        "answer" : "charset negociation ⇒ Accept-Charset",
        "valid" : true
      },
      {
        "answer" : "encoding negociation ⇒ Accept-Encoding",
        "valid" : true
      },
      {
        "answer" : "language negociation ⇒ Accept-Language",
        "valid" : true
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "What is reactive content negotiation?",
    "answers" : [
      {
        "answer" : "When the client doesn't give enough information about the format of the response it wishes to receive, the server uses the `User-Agent` header to determine which format is the most appropriate.",
        "valid" : false
      },
      {
        "answer" : "When the client doesn't give enough information about the format of the response it wishes to receive, the server replies to the client with a list of links for each format. The client can then choose the format that suits him best.",
        "valid" : true
      },
      {
        "answer" : "When the server automatically decides which content format to send to the client, regardless of the client's initial request.",
        "valid" : false
      },
      {
        "answer" : "When the client and server actively negotiate the content format to be used by exchanging negotiation messages.",
        "valid" : false
      },
      {
        "answer" : "When the client does not provide sufficient information about the format of the response it wishes to receive, the server returns an error to the client.",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "If French is unavailable, what language will be returned ?",
    "answers" : [
      {
        "answer" : "French",
        "valid" : false
      },
      {
        "answer" : "English (US)",
        "valid" : false
      },
      {
        "answer" : "English (UK)",
        "valid" : true
      },
      {
        "answer" : "English",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [
      "http/1.png"
    ],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "How long before the cache expires ?\n",
    "answers" : [
      {
        "answer" : "600 seconds",
        "valid" : true
      },
      {
        "answer" : "600 minutes",
        "valid" : false
      },
      {
        "answer" : "500 seconds",
        "valid" : false
      },
      {
        "answer" : "an exception will be thrown",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [
      "http/2.png"
    ],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "Can we give the same config in #[Cache()] and in Symfony\\Component\\HttpFoundation\\Response ?",
    "answers" : [
      {
        "answer" : "No, the `Response` class not contains the cache methods",
        "valid" : false
      },
      {
        "answer" : "Yes, the Response class contains all methods to config the cache",
        "valid" : false
      },
      {
        "answer" : "Yes, the Response class contains all methods to config the cache, except for maxStale",
        "valid" : true
      },
      {
        "answer" : "No, you can only configure public, expires, maxage and smaxage",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "How cache validation works ?",
    "answers" : [
      {
        "answer" : "Compare a fingerprint of cached response and recreated response",
        "valid" : true
      },
      {
        "answer" : "Compare the last modified date of cached response and recreated response",
        "valid" : true
      }
    ],
    "explanations": [
      "Compare fingerprint with Etag and If-None-Match headers",
      "Compare last modified date with Last-Modified and If-Modified-Since header"
    ],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "What is the benefit(s) to use cache validation ?",
    "answers" : [
      {
        "answer" : "save bandwidth",
        "valid" : true
      },
      {
        "answer" : "save CPU cycles",
        "valid" : false
      },
      {
        "answer" : "save bandwidth and CPU cycles",
        "valid" : false
      }
    ],
    "explanations": [
      "The cache validation consist to compare a “fingerprint” of response between Etag header and If-None-Match header, the response should be created to each time."
    ],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "Which statements are true about HTTP methods?",
    "answers" : [
      {
        "answer" : "GET, DELETE and HEAD are valid methods",
        "valid" : true
      },
      {
        "answer" : "CONNECT and SUBJECT are valid methods",
        "valid" : false
      },
      {
        "answer" : "OPTIONS and TRACE are valid methods",
        "valid" : true
      },
      {
        "answer" : "GET, DELETE, POST and PUT are the only valid methods",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "Which statements are true about HTTP methods?",
    "answers" : [
      {
        "answer" : "PUT is a safe method",
        "valid" : false
      },
      {
        "answer" : "HEAD and OPTION are safe methods",
        "valid" : true
      },
      {
        "answer" : "PUT and DELETE are idempotent but not secure methods (unsafe)",
        "valid" : true
      },
      {
        "answer" : "GET and HEAD are the only methods where responses can be cached.\n",
        "valid" : false
      }
    ],
    "explanations": [
      "A response to a POST or PATCH request can also be cached if freshness is indicated and the Content-Location header is set"
    ],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "How can I be sure to completely deactivate the cache of a request?",
    "answers" : [
      {
        "answer" : "With the HTTP header Pragma: no-cache",
        "valid" : false
      },
      {
        "answer" : "With the HTTP header Cache-Control: no-cache",
        "valid" : true
      },
      {
        "answer" : "With HTTP header Cache: no-cache",
        "valid" : false
      },
      {
        "answer" : "With HTTP header Disable-Cache: true",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "Do all requests sent via the HTTP Client component use the HTTP/2 protocol by default?",
    "answers" : [
      {
        "answer" : "Yes, it is always active by default",
        "valid" : false
      },
      {
        "answer" : "Yes, on HTTPS requests only and by checking certain prerequisites",
        "valid" : true
      },
      {
        "answer" : "No, it must be enabled in the configuration via the `http_version: 2.0` parameter",
        "valid" : false
      },
      {
        "answer" : "No, the protocol is not supported",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "With HTTP Client's scoped client, is it possible to choose which client to use during autowiring?",
    "answers" : [
      {
        "answer" : "No, Symfony will only automatically choose which client to use via its scope",
        "valid" : false
      },
      {
        "answer" : "Yes, by naming its property as defined in the configuration",
        "valid" : true
      },
      {
        "answer" : "Yes, using the base_uri parameter",
        "valid" : false
      },
      {
        "answer" : "No, Symfony magically does everything by itself",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "What authentication methods are available in HTTP Client?",
    "answers" : [
      {
        "answer" : "HTTP Basic",
        "valid" : true
      },
      {
        "answer" : "LDAP",
        "valid" : false
      },
      {
        "answer" : "HTTP Bearer",
        "valid" : true
      },
      {
        "answer" : "Microsoft NTLM",
        "valid" : true
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "Which headers are handled automatically by the HTTP Client depending on the data sent?",
    "answers" : [
      {
        "answer" : "Content-type: multipart/form-data",
        "valid" : false
      },
      {
        "answer" : "Content-Type: application/x-www-form-urlencoded",
        "valid" : true
      },
      {
        "answer" : "Content-Type: text/html",
        "valid" : false
      },
      {
        "answer" : "Content-Type: application/json",
        "valid" : true
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "What is the difference between the HTTP Client component and the BrowserKit component?",
    "answers" : [
      {
        "answer" : "HTTP Client is stateful, unlike BrowserKit",
        "valid" : true
      },
      {
        "answer" : "HTTP Client only makes requests, whereas BrowserKit simulates a browser",
        "valid" : true
      },
      {
        "answer" : "Both components can make HTTP requests",
        "valid" : true
      },
      {
        "answer" : "The BrowserKit component cannot make HTTP requests",
        "valid" : false
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  },
  {
    "question": "Does the HttpClient component respect PSR-18 natively?",
    "answers" : [
      {
        "answer" : "True",
        "valid" : false
      },
      {
        "answer" : "False",
        "valid" : true
      }
    ],
    "explanations": [],
    "images": [],
    "versionMin": null,
    "versionMax": null
  }
]